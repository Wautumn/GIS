<div class="pageEight container active">

    <div class="selectEight" style="margin:0">

        <span class="placeholder">底图选择</span>
        <ul>
            <li value="oceans">oceans</li>
            <li value="gray">gray</li>
            <li value="national-geographic">national-geographic</li>
            <li value="hybrid">hybrid</li>
            <li value="osm">osm</li>
            <li value="satellite">satellite</li>
            <li value="streets">streets</li>
            <li value="topo">topo</li>
        </ul>
    </div>
    <div id="viewDiv8"></div>
    <div id="main" style="width: 80%;height:400px;"></div>
</div>
<script>
    var basemap = "";
    $('.selectEight').on('click', '.placeholder', function(e) {
        var parent = $(this).closest('.selectEight');
        if (!parent.hasClass('is-open')) {
            parent.addClass('is-open');
            $('.selectEight.is-open').not(parent).removeClass('is-open');
        } else {
            parent.removeClass('is-open');
        }
        e.stopPropagation();
    }).on('click', 'ul>li', function() {
        var parent = $(this).closest('.selectEight');
        parent.removeClass('is-open').find('.placeholder').text($(this).text());
        basemap = this.attributes[0].value;
        require([
            "esri/Map",
            "esri/views/MapView",
            "esri/Graphic",
            "esri/layers/GraphicsLayer",
            "esri/tasks/RouteTask",
            "esri/tasks/support/RouteParameters",
            "esri/tasks/support/FeatureSet",
            "esri/symbols/SimpleMarkerSymbol",
            "esri/symbols/SimpleLineSymbol",
            "esri/Color",
            "esri/core/urlUtils",
            "dojo/on",
            "dojo/domReady!"
        ], function(
            Map, MapView, Graphic, GraphicsLayer, RouteTask, RouteParameters,
            FeatureSet, SimpleMarkerSymbol, SimpleLineSymbol, Color, urlUtils, on
        ) {

            // proxy the route requests to avoid prompt for log in
            // urlUtils.addProxyRule({
            //   urlPrefix: "route.arcgis.com",
            //   proxyUrl: "/sproxy/"
            // });

            // Point the URL to a valid route service
            var routeTask = new RouteTask({
                url: "http://10.60.42.201:6447/arcgis/rest/services/ShanghaiMap/NAServer/路径"
            });

            // The stops and route result will be stored in this layer
            var routeLyr = new GraphicsLayer();

            // Setup the route parameters
            var routeParams = new RouteParameters({
                stops: new FeatureSet(),
                outSpatialReference: { // autocasts as new SpatialReference()
                    wkid: 3857
                }
            });

            // Define the symbology used to display the stops
            var stopSymbol = new SimpleMarkerSymbol({
                style: "cross",
                size: 15,
                outline: { // autocasts as new SimpleLineSymbol()
                    width: 4
                }
            });

            // Define the symbology used to display the route
            var routeSymbol = new SimpleLineSymbol({
                color: [0, 0, 255, 0.5],
                width: 5
            });

            var map = new Map({
                basemap: basemap,
                layers: [routeLyr] // Add the route layer to the map
            });
            var view = new MapView({
                container: "viewDiv8", // Reference to the scene div created in step 5
                map: map, // Reference to the map object created before the scene
                center: [121, 31],
                zoom: 14
            });

            // Adds a graphic when the user clicks the map. If 2 or more points exist, route is solved.
            on(view, "click", addStop);

            function addStop(event) {
                // Add a point at the location of the map click
                var stop = new Graphic({
                    geometry: event.mapPoint,
                    symbol: stopSymbol
                });
                routeLyr.add(stop);

                // Execute the route task if 2 or more stops are input
                routeParams.stops.features.push(stop);
                if (routeParams.stops.features.length >= 2) {
                    routeTask.solve(routeParams).then(showRoute);
                }
            }
            // Adds the solved route to the map as a graphic
            function showRoute(data) {
                var routeResult = data.routeResults[0].route;
                routeResult.symbol = routeSymbol;
                routeLyr.add(routeResult);
            }
        });
    })


        require([
      "esri/Map",
      "esri/views/MapView",
      "esri/Graphic",
      "esri/layers/GraphicsLayer",
      "esri/tasks/RouteTask",
      "esri/tasks/support/RouteParameters",
      "esri/tasks/support/FeatureSet",
      "esri/symbols/SimpleMarkerSymbol",
      "esri/symbols/SimpleLineSymbol",
      "esri/Color",
      "esri/core/urlUtils",
      "dojo/on",
      "dojo/domReady!"
    ], function(
      Map, MapView, Graphic, GraphicsLayer, RouteTask, RouteParameters,
      FeatureSet, SimpleMarkerSymbol, SimpleLineSymbol, Color, urlUtils, on
    ) {

      // proxy the route requests to avoid prompt for log in
      // urlUtils.addProxyRule({
      //   urlPrefix: "route.arcgis.com",
      //   proxyUrl: "/sproxy/"
      // });

      // Point the URL to a valid route service
      var routeTask = new RouteTask({
        url: "http://10.60.42.201:6447/arcgis/rest/services/ShanghaiMap/NAServer/路径"
      });

      // The stops and route result will be stored in this layer
      var routeLyr = new GraphicsLayer();

      // Setup the route parameters
      var routeParams = new RouteParameters({
        stops: new FeatureSet(),
        outSpatialReference: { // autocasts as new SpatialReference()
          wkid: 3857
        }
      });

      // Define the symbology used to display the stops
      var stopSymbol = new SimpleMarkerSymbol({
        style: "cross",
        size: 15,
        outline: { // autocasts as new SimpleLineSymbol()
          width: 4
        }
      });

      // Define the symbology used to display the route
      var routeSymbol = new SimpleLineSymbol({
        color: [0, 0, 255, 0.5],
        width: 5
      });

      var map = new Map({
        basemap: "gray",
        layers: [routeLyr] // Add the route layer to the map
      });
      var view = new MapView({
        container: "viewDiv8", // Reference to the scene div created in step 5
        map: map, // Reference to the map object created before the scene
        center: [121, 31],
        zoom: 14
      });

      // Adds a graphic when the user clicks the map. If 2 or more points exist, route is solved.
      on(view, "click", addStop);

      function addStop(event) {
        // Add a point at the location of the map click
        var stop = new Graphic({
          geometry: event.mapPoint,
          symbol: stopSymbol
        });
        routeLyr.add(stop);

        // Execute the route task if 2 or more stops are input
        routeParams.stops.features.push(stop);
        if (routeParams.stops.features.length >= 2) {
          routeTask.solve(routeParams).then(showRoute);
        }
      }
      // Adds the solved route to the map as a graphic
      function showRoute(data) {
        var routeResult = data.routeResults[0].route;
        routeResult.symbol = routeSymbol;
        routeLyr.add(routeResult);
      }
    });

</script>


<style>
    .pageEight.container {
        display: flex;
        display: -webkit-flex;
        flex-direction: column;
        align-items: center;
        height: 100%;
        overflow-y: auto;
    }

    .pageEight.container > div {
        margin: 20px;
    }

    .pageEight.container > h2 {
        align-self: flex-start;
        color: #0088f5;
        font-size: 1.2em;
        margin: 40px;
    }

    .pageEight.container.active {
        display: none;
    }

    #viewDiv8 {
        padding: 0;
        margin: 10px;
        height: 100%;
        width: 100%;
        max-width: calc(100% - 202px);
    }

    #viewDiv8.active {
        display: none;
    }
    .selectEight { position: relative; display: block; margin: 0 auto; width: 10%; max-width: 325px; color: #cccccc; vertical-align: middle; text-align: left; user-select: none; -webkit-touch-callout: none;}
    .selectEight .placeholder { position: relative; display: block; background-color: #393d41; z-index: 1; padding: 1em; border-radius: 2px; cursor: pointer;}
    .selectEight .placeholder:hover { background: #34383c;}
    .selectEight .placeholder:after { position: absolute; right: 1em; top: 50%; transform: translateY(-50%); font-family: 'FontAwesome'; content: '\f078'; z-index: 10;}
    .selectEight.is-open .placeholder:after { content: '\f077';}
    .selectEight.is-open ul { display: block;}
    .selectEight.selectEight--white .placeholder { background: #fff; color: #999;}
    .selectEight.selectEight--white .placeholder:hover { background: #fafafa;}
    .selectEight.selectEight--green .placeholder { background: #5BF36E; color: #FFF;}
    .selectEight.selectEight--green .placeholder:hover { background: #5BF36E;}
    .selectEight ul { display: none; position: absolute; overflow: hidden; width: 100%; background: #fff; border-radius: 2px; top: 100%; left: 0; list-style: none; margin: 5px 0 0 0; padding: 0; z-index: 100;}
    .selectEight ul li { display: block; text-align: left; padding: 0.8em 1em 0.8em 1em; color: #999; cursor: pointer;}
    .selectEight ul li:hover { background: #4ebbf0; color: #fff;}
</style>